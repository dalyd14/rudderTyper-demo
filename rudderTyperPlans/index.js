'use strict'
/**
 * This client was automatically generated by RudderTyper. ** Do Not Edit **
 */
var __assign =
	(this && this.__assign) ||
	function() {
		__assign =
			Object.assign ||
			function(t) {
				for (var s, i = 1, n = arguments.length; i < n; i++) {
					s = arguments[i]
					for (var p in s)
						if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p]
				}
				return t
			}
		return __assign.apply(this, arguments)
	}
var __importDefault =
	(this && this.__importDefault) ||
	function(mod) {
		return mod && mod.__esModule ? mod : { default: mod }
	}
Object.defineProperty(exports, '__esModule', { value: true })
exports.pleaseShowUp = exports.someOtherEvent = exports.testEvent = exports.setRudderTyperOptions = exports.defaultValidationErrorHandler = void 0
/**
 * Ajv is a peer dependency for development builds. It's used to apply run-time validation
 * to message payloads before passing them on to the underlying analytics instance.
 *
 * Note that the production bundle does not depend on Ajv.
 *
 * You can install it with: `npm install --save-dev ajv`.
 *
 * In order to support run-time validation of draft-04 JSON Schema we are using `ajv-draft-04`.
 * You can install it with: `npm install --save-dev ajv-draft-04`.
 *
 */
var ajv_1 = __importDefault(require('ajv'))
var ajv_draft_04_1 = __importDefault(require('ajv-draft-04'))
/**
 * The default handler that is fired if none is supplied with setRudderTyperOptions.
 * If NODE_ENV="test", this handler will throw an error. Otherwise, it will log
 * a warning message to the console.
 */
var defaultValidationErrorHandler = function(message, violations) {
	var msg = JSON.stringify(
		{
			type: 'RudderTyper JSON Schema Validation Error',
			description:
				'You made an analytics call ('.concat(
					message.event,
					") using RudderTyper that doesn't match the "
				) + 'Tracking Plan spec.',
			errors: violations,
		},
		undefined,
		2
	)
	if (process.env.NODE_ENV === 'test') {
		throw new Error(msg)
	}
	console.warn(msg)
}
exports.defaultValidationErrorHandler = defaultValidationErrorHandler
var onViolation = exports.defaultValidationErrorHandler
var missingAnalyticsNodeError = new Error(
	"You must set an analytics-node instance:\n\n>\tconst RudderAnalytics = require('@rudderstack/rudder-sdk-node');\n>\tconst { setRudderTyperOptions } = require('./analytics')\n>\n>\tconst analytics = new RudderAnalytics(WRITE_KEY, DATA_PLANE_URL/v1/batch)\n>\tsetRudderTyperOptions({\n>\t\tanalytics: analytics,\n>\t})\n\nFor more information on analytics-node, see: https://docs.rudderstack.com/stream-sources/rudderstack-sdk-integration-guides/rudderstack-node-sdk#installing-the-rudderstack-node-js-sdk\n"
)
var analytics = function() {
	throw missingAnalyticsNodeError
}
/**
 * Updates the run-time configuration of this RudderTyper client.
 * This function must be called with a configured analytics-node instance before firing
 * any analytics calls, or else a `missingAnalyticsNodeError` error will be thrown.
 *
 * @param {RudderTyperOptions} options - the options to upsert
 *
 * @typedef {Object} RudderTyperOptions
 * @property {Rudder.AnalyticsNode} analytics - Underlying analytics instance where analytics
 * 		calls are forwarded on to.
 * @property {Function} [onViolation] - Handler fired when if an event does not match its spec. This handler does not fire in
 * 		production mode, because it requires inlining the full JSON Schema spec for each event in your Tracking Plan. By default,
 * 		it will throw errors if NODE_ENV="test" so that tests will fail if a message does not match the spec. Otherwise, errors
 * 		will be logged to stderr.
 */
function setRudderTyperOptions(options) {
	analytics = options.analytics
		? function() {
				return options.analytics
		  }
		: analytics
	onViolation = options.onViolation || onViolation
}
exports.setRudderTyperOptions = setRudderTyperOptions
/**
 * Validates a message against a JSON Schema using Ajv. If the message
 * is invalid, the `onViolation` handler will be called.
 */
function validateAgainstSchema(message, schema) {
	var ajv
	if (schema['$schema'] && schema['$schema'].includes('draft-04')) {
		ajv = new ajv_draft_04_1.default({
			allErrors: true,
			verbose: true,
		})
	} else {
		ajv = new ajv_1.default({
			allErrors: true,
			verbose: true,
		})
		ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'))
	}
	if (!ajv.validate(schema, message) && ajv.errors) {
		onViolation(message, ajv.errors)
	}
}
/**
 * Helper to attach metadata on RudderTyper to outbound requests.
 * This is used for attribution and debugging by the RudderStack team.
 */
function withRudderTyperContext(message) {
	return __assign(__assign({}, message), {
		context: __assign(__assign({}, message.context || {}), {
			ruddertyper: {
				sdk: 'analytics-node',
				language: 'javascript',
				rudderTyperVersion: '1.0.0-beta.5',
				trackingPlanId: 'tp_2H6BWiTEkG7ckTe3XDEBbMgVBAY',
				trackingPlanVersion: '4',
			},
		}),
	})
}
/**
 * A message payload for an analytics-node `.track()` call.
 * See: https://docs.rudderstack.com/stream-sources/rudderstack-sdk-integration-guides/rudderstack-node-sdk#track
 *
 * @typedef TrackMessage<PropertiesType>
 * @property {string | number} [userId] - The ID for this user in your database.
 * @property {string | number} [anonymousId] - An ID to associated with the user when you don’t know who they are.
 * @property {PropertiesType} [properties] - A dictionary of properties for the event.
 * @property {Date} [timestamp] - A Javascript date object representing when the track took place. If the track
 * 		just happened, leave it out and we’ll use the server’s time. If you’re importing data from the past make
 * 		sure you to send a timestamp.
 * @template PropertiesType
 */
/**
 * @typedef TestEvent
 * @property {number} [number] -
 * @property {string} [product] -
 * @property {string} some_id -
 * @property {string} [something] -
 */
/**
 * @typedef SomeOtherEvent
 * @property {string} [here] -
 * @property {string} [id] -
 * @property {string} [yea] -
 */
/**
 * @typedef PleaseShowUp
 * @property {string} did_it -
 * @property {string} [please] -
 * @property {string} [show] -
 * @property {string} [up] -
 */
/**
 * event descrip missing
 *
 * @param {TrackMessage<TestEvent>} message - The analytics properties that will be sent to RudderStack.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
function testEvent(message, callback) {
	var msg = withRudderTyperContext(
		__assign(__assign({ properties: {} }, message), { event: 'Test Event' })
	)
	var schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		description: 'event descrip missing',
		properties: {
			properties: {
				additionalProperties: false,
				properties: {
					number: {
						type: ['integer'],
					},
					product: {
						type: ['string'],
					},
					some_id: {
						type: ['string'],
					},
					something: {
						type: ['string'],
					},
				},
				required: ['some_id'],
				type: 'object',
			},
		},
		required: ['properties'],
		title: 'Test Event',
		type: 'object',
	}
	validateAgainstSchema(msg, schema)
	var a = analytics()
	if (a) {
		a.track(msg, callback)
	} else {
		throw missingAnalyticsNodeError
	}
}
exports.testEvent = testEvent
/**
 * event descrip missing
 *
 * @param {TrackMessage<SomeOtherEvent>} message - The analytics properties that will be sent to RudderStack.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
function someOtherEvent(message, callback) {
	var msg = withRudderTyperContext(
		__assign(__assign({ properties: {} }, message), {
			event: 'Some other event',
		})
	)
	var schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		description: 'event descrip missing',
		properties: {
			properties: {
				additionalProperties: false,
				properties: {
					here: {
						type: ['string'],
					},
					id: {
						type: ['string'],
					},
					yea: {
						type: ['string'],
					},
				},
				required: [],
				type: 'object',
			},
		},
		title: 'Some other event',
		type: 'object',
	}
	validateAgainstSchema(msg, schema)
	var a = analytics()
	if (a) {
		a.track(msg, callback)
	} else {
		throw missingAnalyticsNodeError
	}
}
exports.someOtherEvent = someOtherEvent
/**
 * fdf
 *
 * @param {TrackMessage<PleaseShowUp>} message - The analytics properties that will be sent to RudderStack.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
function pleaseShowUp(message, callback) {
	var msg = withRudderTyperContext(
		__assign(__assign({ properties: {} }, message), { event: 'Please Show Up' })
	)
	var schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		description: 'fdf',
		properties: {
			properties: {
				additionalProperties: false,
				properties: {
					did_it: {
						type: ['string'],
					},
					please: {
						type: ['string'],
					},
					show: {
						type: ['string'],
					},
					up: {
						type: ['string'],
					},
				},
				required: ['did_it'],
				type: 'object',
			},
		},
		required: ['properties'],
		title: 'Please Show Up',
		type: 'object',
	}
	validateAgainstSchema(msg, schema)
	var a = analytics()
	if (a) {
		a.track(msg, callback)
	} else {
		throw missingAnalyticsNodeError
	}
}
exports.pleaseShowUp = pleaseShowUp
var clientAPI = {
	/**
	 * Updates the run-time configuration of this RudderTyper client.
	 * This function must be called with a configured analytics-node instance before firing
	 * any analytics calls, or else a `missingAnalyticsNodeError` error will be thrown.
	 *
	 * @param {RudderTyperOptions} options - the options to upsert
	 *
	 * @typedef {Object} RudderTyperOptions
	 * @property {Rudder.AnalyticsNode} analytics - Underlying analytics instance where analytics
	 * 		calls are forwarded on to.
	 * @property {Function} [onViolation] - Handler fired when if an event does not match its spec. This handler does not fire in
	 * 		production mode, because it requires inlining the full JSON Schema spec for each event in your Tracking Plan. By default,
	 * 		it will throw errors if NODE_ENV="test" so that tests will fail if a message does not match the spec. Otherwise, errors
	 * 		will be logged to stderr.
	 */
	setRudderTyperOptions: setRudderTyperOptions,
	/**
	 * event descrip missing
	 *
	 * @param {TrackMessage<TestEvent>} message - The analytics properties that will be sent to RudderStack.
	 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
	 * 		call is fired.
	 */
	testEvent: testEvent,
	/**
	 * event descrip missing
	 *
	 * @param {TrackMessage<SomeOtherEvent>} message - The analytics properties that will be sent to RudderStack.
	 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
	 * 		call is fired.
	 */
	someOtherEvent: someOtherEvent,
	/**
	 * fdf
	 *
	 * @param {TrackMessage<PleaseShowUp>} message - The analytics properties that will be sent to RudderStack.
	 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
	 * 		call is fired.
	 */
	pleaseShowUp: pleaseShowUp,
}
exports.default = new Proxy(clientAPI, {
	get: function(target, method) {
		if (typeof method === 'string' && target.hasOwnProperty(method)) {
			return target[method]
		}
		return function() {
			console.warn(
				'\u26A0\uFE0F  You made an analytics call ('.concat(
					String(method),
					") that can't be found. Either:\n    a) Re-generate your ruddertyper client: `npx rudder-typer`\n    b) Add it to your Tracking Plan: https://api.rudderstack.com/trackingplans/tp_2H6BWiTEkG7ckTe3XDEBbMgVBAY"
				)
			)
			var a = analytics()
			if (a) {
				a.track(
					withRudderTyperContext({
						event: 'Unknown Analytics Call Fired',
						properties: {
							method: [method],
						},
						userId: 'ruddertyper',
					})
				)
			}
		}
	},
})
